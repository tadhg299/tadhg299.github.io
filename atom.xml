<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[梦里广播]]></title>
  <link href="http://www.radioindreams.com/atom.xml" rel="self"/>
  <link href="http://www.radioindreams.com/"/>
  <updated>2016-04-12T15:19:35+08:00</updated>
  <id>http://www.radioindreams.com/</id>
  <author>
    <name><![CDATA[炮久久]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[StudyJams的一次发帖]]></title>
    <link href="http://www.radioindreams.com/blog/2016/04/12/studyjamsfirstpost/"/>
    <updated>2016-04-12T11:58:44+08:00</updated>
    <id>http://www.radioindreams.com/blog/2016/04/12/studyjamsfirstpost</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;一直有事比较忙，所以这篇笔记竟一直拖到现在才写。万事开头难，我想当大家开始接触Android时，也会有过脑子里一团乱麻，完全无法下手。我也如此，当初我也是懵逼的。</p>

<p>&nbsp;&nbsp;有句话大概是这样一个意思，在一个领域，教授和学生的区别是:对于那些细如砾石的知识，教授看到的是一座教堂，而学生看到的只是一堵墙。<!--more-->对于教授来说，所有的知识点都已形成了一个知识网络，他不仅知道单独一个知识点的东西，而且还了解这个知识点在知识网络中的位置及和其它知识点的联系。所以对于教授来说，给他一个知识点，他能画出整个知识网络。教授看到了这个体系的知识点的全貌，而学生只能看到一面墙，是由于此时学生接触到的知识点还较少，而且接触到的知识点也并不一定吃透弄明白了。学生看到知识的砾石密集的排列在一块，只觉得它们是一面墙。有一句古诗很好的描述了这种情景，“不识庐山真面目，只缘自挂东南枝”。(⊙o⊙)哦，错了，是“不识庐山真面目，只缘生在此山中”。<br/>
&nbsp;&nbsp;(＾－＾)别吊死在一棵树上哦。</p>

<p>&nbsp;&nbsp;(∩_∩)嗯，开始进入正题。</p>

<p>&nbsp;&nbsp;可以看得出，Google对于毫无编程经验的同学还是很体贴的，一上来并没有直接就甩给你一脸的知识点，而是讲这门课程所面向的主要人群，以及主持人的暗示“菜鸟就菜鸟，别期望能一步上天当凤凰，学完这些课程，你们和专业开发者的差距仍有一大截呢。”</p>

<p>&nbsp;&nbsp;(。﹏。*)啊，有木有觉得受到了伤害，学完这门课程才这点水平啊。不要气馁，积极点乐观点嘛，只要锄头挥得好，哪有困难挖不倒。و✧↖(^ω^)↗，听说，下雨天，毅力和成功更配哦。</p>

<p>&nbsp;&nbsp;第二个视频里，一开始女主持李秀贤（别说你看完了整个视频都不知道女主持的名字，男主持叫啥就不用管了，毕竟我们更关心稀有物种(<em>^▽^</em>)），一开始李秀贤就说：“给我们讲一个你学习新知识并且需要克服困难的经历”，然主持人就开始抖自己的包袱了。“遇到困难并不可怕，可怕的是你没有战胜困难的勇气”，尼古拉斯·赵四和我一起撸串的时候如是说&lt;(￣ˇ￣)/。接下来，主持人为我们形象的将学习Android比喻成学一门语言（内心OS，英语那么难学，这个，臣妾真得做不到啊〒▽〒），但说实在话，我觉得学一门编程语言比学英语简单多了，学英语的过程中经常是无法验证自己的语法、单词错误的，大多数时候大家缺少一个和你对话的人，来在你练习的过程中，不断的纠正你的错误。但学习编程不是这样，可爱的IDE（集成开发环境，课程后面会提到）会在你编程的过程中，给予你辅导，告诉你哪些地方是错哒，有时候在它们力所能及的时候还会直接提供给你问题的解决方案，这么暖心的IDE比任性的女友是不是好多了，(；′⌒`)好吧，我承认我单身了。</p>

<p>&nbsp;&nbsp;第三视频，男主持又上来打击我们了，宝宝心里苦-_-!。那么长的咖啡豆小路，结果我们学完的程度才这么一丟丟。</p>

<p>&nbsp;&nbsp;好吧，再次进入正题，⊙▽⊙ 之前不是已经进入过正题了吗，也许你会说。但学习过程其实也是一种活塞运动，讲究深入浅出、进进出出滴。不要问我“正题”是谁，为什么要进入TA，我很纯洁的(‾◡◝)。</p>

<p>&nbsp;&nbsp;来到正式的第一个知识点，View，什么是View，教学视频里说一个View是个Android手机屏幕上用来展示内容的长方形，它可以是个图片、一段文本、一个按钮或者任何应用能显示的东西。所有这些View合起来组成了屏幕的的布局(Layout)，应用给你展示与你交互的所有这些叫做用户界面(User Interface)简称UI。这里提到了很重要的三个词，View、Layou、UI。我这里换一种表达方式，手机的屏幕好比一个房间，房间里有电视、沙发、茶几、桌子、挂钟、壁画等等，你在房间里所能看到的有形之物都称作View，根据这些家具的不同功用，它们有不同的名字。墙上的艺术画算是一个图片，它叫做ImageView；挂历上有很多文字，它叫做TextView；墙上的电灯开关我们可以触碰它进行开关操作，它叫做Button。所有这些叫做View的家具在房间里以不同的形式摆放起来，就形成了房间（手机屏幕）的布局（Layout）。用户界面并不是指你在房间里看到的东西，不要被“界面”这个词误导了，UI不是有形之物，它指的是一种交互方式，就房间这个比喻而言，UI是你在这个房间的生活方式，从哪里接水，在哪里怎么做饭，闹钟什么时候响会让你什么时候起床，有阳台吗？阳台朝哪儿，光线怎么样，房间天花板高还是低，墙上有墙纸来提升逼格么，诸如此类。一个装修精致的房间会给人带来更好的生活体验，幻想下每天从一万平的床上起床，你™下个床就得爬好远咯，床下铺着柔软的地毯，窗外是沙滩和阳光，沙滩上有漂亮的妹子，妹子正准备解开bra晒太阳，(～￣▽￣)～，原谅我不自觉的又污了，你们自己备好去污粉吧，哈哈。想强调的一点就是，UI决定了你给使用你App的人带来了什么样的使用体验。</p>

<p>&nbsp;&nbsp;Android里的View的名字是使用驼峰命名法（Camel Case），指单词之间不加空格，每个单词的首字母大写，视频里也解释了称之为驼峰是因为这个名字的外形看起来就是骆驼的驼峰一样起伏着。嗯，现在看到的是TextView、ImageView、Button这几个，前面两个是双驼峰、Button属于单驼峰，但如果遇到一些别人自定义的View起名叫CircleImageView这样的话，不要惊慌b(￣▽￣)d，《疯狂动物城》里不是说了嘛，这种三驼峰的骆驼是怀了孕的骆驼哦。当你看到AutoCompleteTextView的时候，也不要惊慌，要淡定，不还是个怀了孕的骆驼嘛，只不过怀的是双胞胎(✿◡‿◡)。</p>

<p>&nbsp;&nbsp;额，我先出去吃个午饭，回来接着写，饿屎了。咕~~(╯﹏╰)b</p>

<p>&nbsp;&nbsp;回来了，吃完饭，B站看了两集盗贼团五叶，再小憩一会，真是舒服啊。o(<em>￣︶￣</em>)o</p>

<p>&nbsp;&nbsp;中间几段答题的视频就跳过了，直接来到秀贤姐调戏男主持的那一段，男主持：“干嘛看我的邮件？”秀贤姐：“我只是想看看你再干嘛！”未来的程序猿们，要学习下秀贤姐这种良好的好（窥）奇（私）心态哦，技术的道路上，日新月异，枝繁叶茂的技能树繁茂过后，总有一些会枯萎，而又有另一些新的枝桠生长出来。保持你的好奇心，攀上新的树枝，迎接别样的阳光吧。o(<em>￣▽￣</em>)o</p>

<p>&nbsp;&nbsp;秀贤姐从男主持写邮件告诉朋友如何喂养他的植物这件事中，机智的联想到写代码。到了“任何事情都让你想起如何写指引或代码”的时候，年轻的修士啊，这时你们才算是正式踏上代码之道，若想终有一日乘风扶摇直上九万里，达到传说中“温赵轮”等上古程序猿的境界，还有很长的修炼之路要走呢。:)</p>

<p>&nbsp;&nbsp;秀贤姐告诉我们，写代码的空间叫做IDE，全称Integrated Development Environment,也就是大家可能听过的集成开发环境，我之前提到的比女友还贴心的IDE妹子啦。教学视频中接着为我们介绍了Android官方支持并推荐的开发工具，Android Studio，以后，我就简称安豆妹子&lt;(<em>￣▽￣</em>)/，话说最近更新的Android Studio 2.0版本，安豆妹子的颜值提升了一个大的档次呢，更加小清新了~(≧▽≦)/~啦啦啦。别被安豆界面上上各种各样的按钮给吓蒙了，慢慢来，一开始只要了解一些常用的功能按钮就好了。</p>

<p>&nbsp;&nbsp;秀贤姐接着告诉你，我们需要用某种语言来和计算机对话，大家应该都知道，计算机是美帝发明的，所以，你会发现程序中的代码几乎都是基于英文单词的。英语不好的小伙伴们也不要黯然神伤，代码中的英文单词通常不会太难，而且在编程练习的过程中，当你的单词拼写错误时，有安豆妹子给你提示。</p>

<p>&nbsp;&nbsp;像是这样，在拼写错误的单词下，会有绿色波浪线，当你把鼠标移动上去的时候，安逗妹子会提醒你，单词拼写错误了咯(　ﾟ∀ﾟ) ﾉ♡，是不是很有爱。随着敲代码的练习增加，写的单词多了，就会越来越熟练，潜在的提高你的单词量哦。现在偷偷告诉你一声，安逗妹子的代码智能补全功能会大大提高你的编程效率，但对于刚接触编程的同学来说，还是对着提示踏踏实实的把每一个字母敲出来为好。</p>

<p>&nbsp;&nbsp;XML，全称Extensive Markup Language，中文翻译是可扩展标记语言，是一种用来描述你的安卓应用会看起来是怎样的方式。我们用它来构建布局（Layout）。我这样理解，XML是房间的平面设计图，我们通过它来布置我们的手机屏幕该显示些什么View、该显示怎样的View。写代码就像是写指示一样，但这个指示是有一定规则的，写的代码要符合安逗妹子的理解。就好比，你给路人指路的时候，不能仅仅按照你自己能够理解的方式讲给路人听，这样的话，路人甲就变成不明真相的路人了，瞬间懵逼MAX。</p>

<p>&nbsp;&nbsp;TextView是这个View的名字，接着android:text这类的是指TextView这个View的属性，颜色、大小、背景、位置、长宽高等等。“Happy Birthday!” 是这个属性text的值，标记这个View要在手机屏幕显示的文字内容是Happy Birthday!，注意：在XML语言中，属性的值需要写在两个引号中。background指的是这些文字的背景是什么，可以是颜色也可以是图片。layout_width和layout_height标记的是TextView在屏幕上占据的宽和高。你可能会有疑问，为什么要写成android：text=  而不是直接text=，前面加上android这个字眼是标明这个属性是Android系统自带的一个属性，以后你可能会了解到自定义属性，当使用自定义属性时可就会是app：my_attribute=”****”这样。</p>

<p>&nbsp;&nbsp;左尖括号标明了对这个View描述的开始，右尖括号标明了对这个View的描述结束了。如果在右尖括号左边有加上反斜杠，视频里说到，像这种叫做自闭标签。怎么理解这个自闭呢，自闭嘛，不愿敞开心扉容纳其它的东西，带自闭标签的时候，说明这个View不愿意其它的View进入到它的内部，嗯，要是我我也不愿意别人进入我的内部o(*≧▽≦)ツ，我又污了。想让别的View进入就单独使用一个闭合标签</TextView>，然后把你想要放进去的其它View放置在开始标签和闭合标签之间。但单独使用闭合标签，就不一定真的表明那个View有能力容纳别的View，你总不可能强行把一本书塞进墙上的一块手表里吧！视频里讲到父元素和子元素，这指的是View之间的层级、包含关系。还是用之前提到把手机屏幕比喻成房间的那个梗，书柜是一个View，同时，书柜中能放书，我们说书柜包含了书这种View，此时书柜就是书的父View，书是书柜的子View。</p>

<p>&nbsp;&nbsp;对于dp的解释，视频中已经讲解的很清楚了，我就不多嘴了。</p>

<p>&nbsp;&nbsp;“有能力修正错误对于开发者来说是一项重要技能，没有一个开发者能在第一次就写出完美的代码”。“要完成目标并不会一帆风顺，你会遇到各种各样的障碍，并且需要你极具创造性的另辟蹊径来绕过障碍”。“而且一旦你绕过了，你还会遇到新的障碍，就这样反反复复，所以你会一直思索绕过障碍的方法”。“而最终，你费尽千辛万苦找到了一条到达目标的路径，尽管历经坎坷，但这一切都是值得的，因为你会获得能力以及自信，并为你走过的路而自豪”。“真正优秀的开发者知道如何从错误中重振，并继续他们的工作”。</p>

<p>&nbsp;&nbsp;看到没，看到没，学编程，分分钟教你做人。编程之道又何尝不是人生之道，人生路漫漫，一路上会遇见各种各样的风景，也会遇到各种各样的不幸和困难。人生路上报Error了，抛异常了，出bug了，不要灰心，鼓起勇气，重新振作起来，找找错误信息，摸索推敲错误原因，重新让它正常跑起来吧↖(^ω^)↗。世上生灵千千万，好好活着，没有Easy的生活，但要有颗Easy的心，当前的环境或许未必让你满意，但未来还得靠我们这群年轻人去开拓呢！</p>

<p>&nbsp;&nbsp;编程应当是一种生活态度，有勇气尝试新的、未知的，出错不怕错，努力解决问题，让人生运行的更美好。o(<em>￣▽￣</em>)o</p>

<p>&nbsp;&nbsp;接下来的视频中主要就是在介绍TextView和ImageView的一些属性了，View的属性很多，但并不是每一个都会经常用到，只需记住常用的一些属性即可，属性值的具体用法也能通过搜索引擎很容易搜到你想要的东西。通过网络，我们不只是玩游戏，看电影、听歌，我们也能通过网络获取知识。查阅Android官网不方便的话，可以访问国内的这个网站<a href="http://www.android-doc.com/">http://www.android-doc.com/</a>。</p>

<p>&nbsp;&nbsp;在studyjams的论坛版块页面底部，其实有些对Android开发很有帮助的网站或博客，大家也不要错过。</p>

<p>&nbsp;&nbsp;嗯，今天写了一整天，很充实，就到这里了。<br/>
&nbsp;&nbsp;Ps：中午出去吃饭，回来后发现漂亮的女邻居做了饭，正在客厅吃饭，她还问我吃了没，要不要和她一起吃。〒▽〒，错过一次和漂亮女邻居共进午餐的机会。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[碎碎]]></title>
    <link href="http://www.radioindreams.com/blog/2016/03/14/history-and-me/"/>
    <updated>2016-03-14T15:20:52+08:00</updated>
    <id>http://www.radioindreams.com/blog/2016/03/14/history-and-me</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;小时候看洗衣服,对盆子里洗衣服洗出的泡泡很感兴趣，在太阳的映射下，它们是那么绚丽，色彩在泡泡的表面不停歇地流转。有些泡泡很小，还没注意到就破灭了，大部分泡泡都不大，可随着双手在洗衣水里搅拌，就会随机出现一些较大的泡泡，越大的泡泡总是能更清楚的看到其上的绚烂。看着那些大大的泡泡，我总会忍不住戳破它们，因为就算我不碰它们，随着时间流逝，它们也会渐渐失去色彩，最后破灭。</p>

<!--more-->


<p>&nbsp;&nbsp;后来知道了用肥皂水可以人为的吹出泡泡后，玩得更开心了。缓慢的吹气，吹出更大的泡泡，又或是快速的吹出一连串的小泡泡，再或者是把两个泡泡叠放在一起，还尝试着把泡泡放在皮肤上。吹出的泡泡，比在盆子里搅动洗衣水产生的泡泡更大。泡泡吹太大了是容易破的，这个我们都知道，但是心里总会有一种期待，期待这次会有个更大的泡泡，能持续更久而不破灭。很清楚的是，泡泡总会破的。</p>

<p>&nbsp;&nbsp;历史的泡沫一遍又一遍重演，可人们总会期待，下一个泡沫会更大，持续得更久，并对这种期待，乐此不疲。前天早晨在地铁上刷知乎，看到问题《1990年代在高位接盘的日本人，在房价崩溃后都怎么样了？》。答案中，提到一句名言：“人类从历史中学到的唯一教训就是，人类从不吸取历史教训”。经济史上，一次又一次泡沫产生，可似乎大家都认为这次泡沫是与众不同的，这种盲目的乐观，也许是骨子里的天性。在有些事情上，如果不一直保持着乐观，也许某些事就干不下去了。</p>

<p>&nbsp;&nbsp;我觉得我一直没弄懂“钱”到底是什么，只知道钱能用来买东西。钱代表着一种价值，但钱如果不被使用，其价值就无法真正体现出来。一直以来都只清楚两点，多挣钱，多存钱。我估摸着这种心态源于安全感的缺失。至今，“钱”的概念仍然使我困惑着。</p>

<p>&nbsp;&nbsp;看了《华尔街之狼》，让我刚对股票、基金等金融投资燃起的兴趣又熄灭了。把一些垃圾股说得天花乱坠，忽悠做着发财梦的客户去买，就是赤裸裸的骗钱。听信于别人的说辞做投资，这种蠢透了的事，总会有人相信。这就是个狼吃肉狗吃屎的世界啊！</p>

<p>&nbsp;&nbsp;一个人被骗的根本是他把选择权交给了别人。</p>

<p>&nbsp;&nbsp;总觉得要做的事情很多，又总是抽不出时间做,这就是蠢得死，不懂取舍，不懂规划。</p>

<p>&nbsp;&nbsp;现在是职业成长期，重复的做一件事，很快就会让人失去干劲的，所以我不拒绝公司让我们学新的东西，做一些其它的工作，好歹也是全面发展嘛！</p>

<p>&nbsp;&nbsp;上周来我们公司的医生贺伟强，今天貌似是走了。好奇心驱使，去网上搜了他的名字，搜到央视关于他的一篇报道。“工资低，我要找工作”。看完视频，有些同情起这个人来，这个年纪，正是要全力养家的时候，辞职重新找工作会有很大压力吧！有些难以想象这之中的艰辛，看他在北京住的地方也算是比较差了。</p>

<p>&nbsp;&nbsp;人活着，各有各的不容易，善待身边的朋友。好好打理自己的财务状况吧。</p>

<blockquote><p>这次写的东西挺乱的，时间跨度也比较长，心里也是五味杂陈。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随想]]></title>
    <link href="http://www.radioindreams.com/blog/2016/02/25/caprice/"/>
    <updated>2016-02-25T23:51:27+08:00</updated>
    <id>http://www.radioindreams.com/blog/2016/02/25/caprice</id>
    <content type="html"><![CDATA[<h3>有些事很艰难，但我想试着做一做</h3>

<p>&nbsp;&nbsp;我比较懒，但这还不够糟糕，更糟糕的是自己很懒却从没意识到自己懒。把一切的懒惰、懈怠当做是自己享受生活的一种方式。或许是很多时候，自己都不觉得情况有多严峻，其实缘于对自己的要求低、期望低，当一个人不对下一刻或者是更远的未来抱有更大的期待时，尽情享受当下便足矣了。<!--more--></p>

<p>&nbsp;&nbsp;不是任何时候一个人都有足够的毅力去克服自己内心的障碍，就比如在写这篇文章之前，我脑海里蹦出来的第一个想法是：“都这么晚了，明天再写吧！早点上床玩手机，睡觉得了！”当然，这种想法并没有什么好苛责的，人的基因里生性懒惰着，但区别于优秀与普通的正是在于，一个人能否抵制住呆在“舒适区”的诱惑。尽管，很多普通人对优秀这个定义会嗤之以鼻，那是因为普通人不太容易做到这点，又尽管能做到抵制诱惑却无法坚持下去。人都会扬长避短嘛，对于做不到的事，就算别人吹捧上天，我们也嘴上说瞧不上，心里其实直嫉妒。此外，正视自己的不足，是一个优秀的人所应该具备的第一品质。人无完人，世上没有什么十全十美，即使是十分优秀的人也只是在追求完美的道路走得比一般人远一些。若不能正视自己的不足，羡慕嫉妒恨别人的长处，荒废时间和岁月，误了自己成长的光阴，岂不是太不划算了。我就有时候在听到别人被称赞时，心里隐隐不爽，觉得别人得到些称赞并没有什么了不起的。可自己呢？事实上在某些方面自己确实比别人差，但又不肯接受这种落差，只能在心里骂骂咧咧的来自我安慰。还有一种随之而来的副作用是，听见别人某反面被称赞了，便也想在这方面出出彩，然后就把注意力转移到其它的方面去，而中断了自己正当前更加擅长的方向。更恶劣的是，注意力不断的随着嫉妒心理而转移，结果什么事都做不好。</p>

<p>&nbsp;&nbsp;<strong>优秀的人应该是那种姿态放很低，心理其实很高的模样</strong>。普通人嫉妒心发作的时候是，故作姿态，但心理实际Low得狠。小时候学习，都得父母逼着学，周末作业也总是拖到周日晚上赶。小学那个时候的作业其实无非就是，重复抄写、重复记忆的过程。这些所做的都是为了巩固语言基础，数学基础。到了中学，青春期到来，各种叛逆，想要与众不同，要逆着来。让多读多写，听不进去；花花世界这么大，对于心理开始发育的青少年来说，外面世界的诱惑太大了，谁愿意埋头在课堂上的那些东西。我有些可惜的是，我没人早些接触到代码的世界，也没能领域代码的魅力。知识是有其魅力所在的，当你知道汽车的构造原理是基于你所学的物理和化学时，难道不会感叹知识的精准创造出了汽车这个同样精准的发明。每一个构造，每一个设计，都是依赖于物理或化学那逻辑严密的知识，环环相扣而产生的，只要有一点点的偏差，汽车就发明不出来，而世界就是这么巧妙，一堆知识，按特定的逻辑，不偏不倚的就构造成了一个伟大的交通工具。</p>

<p>&nbsp;&nbsp;说回来，为什么要放低姿态，因为得一步一个脚印，踏踏实实的完成该有的训练，才能形成良好的基础，继而在稳固的基石上建立起高楼大厦。不要好高骛远，想一夜建立一栋楼，沉下心来，一块砖一块砖的码。<strong>不要羡慕别人的高楼，等到你自己的高楼盖好，自己也能看到更广阔的风景。</strong> <em>再者，知识的获取没有捷径可走。</em>或许人和人之间的事，可以通过走捷径来达成，但想在获取知识上，走捷径？没门！再一个，学习的过程要善于记录和总结，以前总不把这句话当回事儿，认为写那些东西浪费力气，但不曾想，记录和总结又何尝不是一个夯实基础的过程，<em>码代码快没有，要没有Bug才叫好</em>。</p>

<blockquote><p>&nbsp;&nbsp;君子当慎独。</p></blockquote>

<p>&nbsp;&nbsp;ps:其实本来想说“与己斗，其乐无穷”的，但发现慎独更有意味。</p>

<hr />

<p>以上，仅以此告诫自己。 <br/>
2016/2/26 1:24:28</p>
]]></content>
  </entry>
  
</feed>
